library 'jenkins_library' 

node('master') {
    
    def artiServer = Artifactory.server 'arti-liwei'
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo = Artifactory.newBuildInfo()
    def descriptor = Artifactory.mavenDescriptor()
    def SONAR_HOST_URL = 'http://x:9000'
    def SONAR_PROJECT_KEY = "${JOB_NAME}"
    def xrayurl
    buildInfo.env.capture = true
    
    

    stage('Preparation') { 
        git  url: 'https://gitee.com/liwei2151284/Guestbook-microservices-k8s.git'

    }
 
    
    stage('Build') {
        def poma = "./gateway-service/pom.xml"
        rtMaven.deployer releaseRepo: 'liwei-maven-local', snapshotRepo: 'liwei-maven-local', server: artiServer
        rtMaven.resolver releaseRepo: 'jcenter', snapshotRepo: 'jcenter', server: artiServer
        rtMaven.deployer.deployArtifacts = false
        descriptor.pomFile = "${poma}".toString()
        //descriptor.setVersion "org.wangqing:Guestbook-microservices-k8s", "1.0.$BUILD_NUMBER"
        descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:gateway-service", "1.0.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:discovery-service", "1.0.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:guestbook-service", "1.3.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:zipkin-service", "1.0.$BUILD_NUMBER" 
        descriptor.transform()
        rtMaven.tool = 'maven' // Tool name from Jenkins configuration
        rtMaven.run pom: "${poma}".toString(), goals: 'clean install', buildInfo: buildInfo
        artiServer.publishBuildInfo buildInfo
    }
    
    
    
    stage('jira issue') {
        def requirements = getRequirements();
        echo "requirements : ${requirements}"
        def revisionIds = getRevisionIds();
        echo "revisionIds : ${revisionIds}"
        if(!requirements){
            echo "没有填写jira issue到commit message，没有关联到jira issue  或 jira issue 格式不正确"
            break
        }
        requirements.each {
            rtMaven.deployer.addProperty("project.issues", "$it".toString())
            rtMaven.deployer.addProperty("$it".toString()+".url", "http://jira.jfrogchina.com:8081/browse/"+"$it".toString())
        }
        rtMaven.deployer.addProperty("project.revisionIds", revisionIds)
    }
    
    //stage('sonar scan'){
    //    withSonarQubeEnv('sonar_token') {
    //        sh "/opt/sonar-scanner/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources='./' -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.java.binaries='*'"
    //	}
    //}

    //stage("Sonar Quality Gate") {
    //    sleep 10
    //    def surl="${SONAR_HOST_URL}/api/measures/component?component=${SONAR_PROJECT_KEY}&metricKeys=alert_status,quality_gate_details,coverage,new_coverage,bugs,new_bugs,reliability_rating,vulnerabilities,new_vulnerabilities,security_rating,sqale_rating,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,duplicated_lines_density&additionalFields=metrics,periods"
    //    def response=httpRequest consoleLogResponseBody: true,  contentType: 'APPLICATION_JSON', ignoreSslErrors: true, url: surl
    //    def propssonar = readJSON text: response.content
    //    if (propssonar.component.measures) {
    //        propssonar.component.measures.each{ measure ->
    //            def val
    //            if (measure.periods){
    //                val = measure.periods[0].value
    //            }else {
    //                val = measure.value
    //            }
    //            rtMaven.deployer.addProperty("sonar.quality.${measure.metric}", val.toString())
    //        }
    //    }
        //增加sonar扫描结果到artifactory
    //    rtMaven.deployer.addProperty("qulity.gate.sonarUrl", "http://snoar.jfrogchina.com/dashboard/index/" + SONAR_PROJECT_KEY)
    //}
    
    
    stage('deploy') {
        buildInfo.env.capture = true
        rtMaven.deployer.deployArtifacts buildInfo
    }
    
    stage('jira add comment'){
        commandText = "curl -H \"Content-type:application/json\" -u youchu:AKCp8jQd21LYZmtxZE8tvpYxsbonctoEpfvv7F5wfPVCRTMND1xLtRuwrQMMviFyD527JYXsY -X POST --data '{\"buildName\": \"${JOB_NAME}\",\"buildNumber\":\"${BUILD_NUMBER}\"}'  http://182.92.214.141:8082/artifactory/api/search/buildArtifacts"
		echo commandText
		downloadurl = [ 'bash', '-c', commandText].execute().text
		requirements.each {
		    jiracommentadd("$it".toString(),'build ok'+downloadurl)
        }
        //jiracommentadd("${requirements}",'build ok'+downloadurl)
    }
    
    stage('xray scan') {
        def xrayConfig = [
            'buildName'     : env.JOB_NAME,
            'buildNumber'   : env.BUILD_NUMBER,
            'failBuild'  : false
        ]
        def xrayResults = artiServer.xrayScan xrayConfig
        xrayurl = readJSON text:xrayResults.toString()
        //echo xrayResults as String
        //获取xray扫描数据
		xrayText = "curl -u  youchu:AKCp8jQd21LYZmtxZE8tvpYxsbonctoEpfvv7F5wfPVCRTMND1xLtRuwrQMMviFyD527JYXsY \"http://182.92.214.141:8082/xray/api/v1/summary/build?build_name="+env.JOB_NAME+"&build_number="+env.BUILD_NUMBER+"\""
		xrayresult = [ 'bash', '-c', xrayText].execute().text
        issueMap = readJSON text:xrayresult
        //漏洞数量
        xraycount = "Security:"+issueMap.issues.count{ it }
        //漏洞报告
        xrayreport = "issues count"+xraycount+"  issues descirbe:     "+xrayurl.summary.more_details_url
        newjiraissue("${JOB_NAME}","${BUILD_NUMBER}",xrayreport)
    }
    
    
    stage('change to in process'){
        requirements.each {
		    jiratransition("$it".toString())
        }
    }
    
    //stage('promoto'){
    //    def promotionConfig = [
	//		'buildName'   : buildInfo.name,
	//		'buildNumber' : buildInfo.number,
	//		'targetRepo'  : 'liwei-maven-local-prod',
	//		'comment': 'this is the promotion comment',
	//		'sourceRepo':'liwei-maven-local',
	//		'status': 'Released',
	//		'includeDependencies': false,
	//		'failFast': true,
	//		'copy': true
	//	]
	//	artiServer.promote promotionConfig
    //}
    
    

}

@NonCPS
def getRequirements(){
    def reqIds = [];
    final changeSets = currentBuild.changeSets
    echo 'changeset count:' + changeSets.size().toString()
    final changeSetIterator = changeSets.iterator()
    while (changeSetIterator.hasNext()) {
        final changeSet = changeSetIterator.next();
        def logEntryIterator = changeSet.iterator();
        while (logEntryIterator.hasNext()) {
            final logEntry = logEntryIterator.next()
            def patten = ~/#[\w\-_\d]+/;
            def matcher = (logEntry.getMsg() =~ patten);
            def count = matcher.getCount();
            for (int i = 0; i < count; i++) {
                reqIds << matcher[i].replace('#', '') 
            }
        }
    }
    return reqIds;
}

@NonCPS
 def getRevisionIds(){
    def reqIds = "";
    final changeSets = currentBuild.changeSets
    if ( changeSets.size() == 0 ) {
        return reqIds;
    }
    final changeSetIterator = changeSets.iterator()
    while (changeSetIterator.hasNext()) {
        final changeSet = changeSetIterator.next();
        def logEntryIterator = changeSet.iterator();
        while (logEntryIterator.hasNext()) {
            final logEntry = logEntryIterator.next()
            reqIds += logEntry.getRevision() + ","
        }
    }
    return reqIds[0..-2]
}
