library 'jenkins_lib' 

node {
    
    def artiServer = Artifactory.server 'artifactory_cloud'
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo = Artifactory.newBuildInfo()
    def descriptor = Artifactory.mavenDescriptor()
    descriptor.version = '1.0.0'
    def SONAR_HOST_URL = 'http://192.168.0.211:9000'
    def SONAR_PROJECT_KEY = "${JOB_NAME}"
    buildInfo.env.capture = true
    
    

    stage('Preparation') { 
        //properties([[$class: 'JiraProjectProperty'], gitLabConnection(''), pipelineTriggers([<object of type com.dabsquared.gitlabjenkins.GitLabPushTrigger>])])
        git credentialsId: 'root', url: 'http://192.168.0.211/root/guestbook_devops.git'

    }
 
    
    stage('Build') {
        def poma = "./gateway-service/pom.xml"
        rtMaven.deployer releaseRepo: 'maven-stage-local-devops', snapshotRepo: 'maven-snapshots-local', server: artiServer
        rtMaven.resolver releaseRepo: 'maven-releases-virtual', snapshotRepo: 'maven-snapshots-virtual', server: artiServer
        rtMaven.deployer.deployArtifacts = false
        descriptor.pomFile = "${poma}".toString()
        //descriptor.setVersion "org.wangqing:Guestbook-microservices-k8s", "1.0.$BUILD_NUMBER"
        descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:gateway-service", "1.0.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:discovery-service", "1.0.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:guestbook-service", "1.3.$BUILD_NUMBER"
        //descriptor.setVersion "org.wangqing.guestbook-microservices-k8s:zipkin-service", "1.0.$BUILD_NUMBER" 
        descriptor.transform()
        rtMaven.tool = 'maven' // Tool name from Jenkins configuration
        rtMaven.run pom: "${poma}".toString(), goals: 'clean install', buildInfo: buildInfo
        artiServer.publishBuildInfo buildInfo
    }
    
    
       
   
    
    stage('deploy') {
        buildInfo.env.capture = true
        rtMaven.deployer.deployArtifacts buildInfo
    }
    
    stage('jira issue') {
        def requirements = getRequirements();
        echo "requirements : ${requirements}"
        def revisionIds = getRevisionIds();
        echo "revisionIds : ${revisionIds}"
        rtMaven.deployer.addProperty("project.issues", requirements).addProperty("project.revisionIds", revisionIds)
    }
    
    stage('sonar scan'){
        withSonarQubeEnv('sonarqube') {
            sh "/opt/sonarqube/sonar-scanner-4.0.0.1744-linux/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources='./' -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.java.binaries='*'"
    	}
    }

    stage("Sonar Quality Gate") {
        sleep 10
        // Just in case something goes wrong, pipeline will be killed after a timeout
        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
        if (qg.status != 'OK') {
            jiracommentadd("${requirements}",'build failed,because sonar gate ')
            newjiraissue("${JOB_NAME}","${BUILD_NUMBER}",'质量门禁未通过')
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
        } else {
            //获取sonar扫描结果
            //def surl="http://116.196.118.189:9000/api/measures/component?componentKey=${JOB_NAME}&metricKeys=alert_status,quality_gate_details,coverage,new_coverage,bugs,new_bugs,reliability_rating,vulnerabilities,new_vulnerabilities,security_rating,sqale_rating,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,duplicated_lines_density&additionalFields=metrics,periods"
            def surl="${SONAR_HOST_URL}/api/measures/component?component=${SONAR_PROJECT_KEY}&metricKeys=alert_status,quality_gate_details,coverage,new_coverage,bugs,new_bugs,reliability_rating,vulnerabilities,new_vulnerabilities,security_rating,sqale_rating,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,duplicated_lines_density&additionalFields=metrics,periods"
           // withCredentials([string(credentialsId: 'sonartoken', variable: 'sonartoken')]) {
                // some block
                def response=httpRequest consoleLogResponseBody: true,  contentType: 'APPLICATION_JSON', ignoreSslErrors: true, url: surl
            //}
            //def response=httpRequest consoleLogResponseBody: true, contentType: 'APPLICATION_JSON', ignoreSslErrors: true, url: surl,customHeaders: [[name: "TOKEN", value: "B456skjasdjkf="]],
            def propssonar = readJSON text: response.content
            if (propssonar.component.measures) {
                propssonar.component.measures.each{ measure ->
                    def val
                    if (measure.periods){
                        val = measure.periods[0].value
                    }else {
                        val = measure.value
                    }
                    rtMaven.deployer.addProperty("sonar.quality.${measure.metric}", val)
        
                }
            }
            //增加sonar扫描结果到artifactory
            rtMaven.deployer.addProperty("qulity.gate.sonarUrl", SONAR_HOST_URL + "/dashboard/index/" + SONAR_PROJECT_KEY)
        }
    }
    
    stage('jira add comment'){
        jiracommentadd("${requirements}",'build ok')
        //withEnv(['JIRA_SITE=jiralocal']) {
        //    def comment = [ body: 'test comment' ]
        //    jiraAddComment idOrKey: "${requirements}", input: comment
        //}
    }
    
    stage('xray scan') {
        def xrayConfig = [
            'buildName'     : env.JOB_NAME,
            'buildNumber'   : env.BUILD_NUMBER,
            'failBuild'  : false
        ]
        def xrayResults = artiServer.xrayScan xrayConfig
        echo xrayResults as String
        rtMaven.deployer.addProperty("xrayresult.summary.total_alerts", '5')

  }
    
    stage('new jira issue'){
        
    }
    
    stage('promoto'){
        def promotionConfig = [
			'buildName'   : buildInfo.name,
			'buildNumber' : buildInfo.number,
			'targetRepo'  : 'maven-release-local-devops',
			'comment': 'this is the promotion comment',
			'sourceRepo':'maven-stage-local-devops',
			'status': 'Released',
			'includeDependencies': false,
			'failFast': true,
			'copy': true
		]
		artiServer.promote promotionConfig
    }
    
    

}

@NonCPS
def getRequirements(){
    def reqIds = "";
    final changeSets = currentBuild.changeSets
    echo 'changeset count:' + changeSets.size().toString()
    final changeSetIterator = changeSets.iterator()
    while (changeSetIterator.hasNext()) {
        final changeSet = changeSetIterator.next();
        def logEntryIterator = changeSet.iterator();
        while (logEntryIterator.hasNext()) {
            final logEntry = logEntryIterator.next()
            def patten = ~/#[\w\-_\d]+/;
            def matcher = (logEntry.getMsg() =~ patten);
            def count = matcher.getCount();
            for (int i = 0; i < count; i++) {
                reqIds += matcher[i].replace('#', '') 
            }
        }
    }
    return reqIds;
}

@NonCPS
 def getRevisionIds(){
    def reqIds = "";
    final changeSets = currentBuild.changeSets
    if ( changeSets.size() == 0 ) {
        return reqIds;
    }
    final changeSetIterator = changeSets.iterator()
    while (changeSetIterator.hasNext()) {
        final changeSet = changeSetIterator.next();
        def logEntryIterator = changeSet.iterator();
        while (logEntryIterator.hasNext()) {
            final logEntry = logEntryIterator.next()
            reqIds += logEntry.getRevision() + ","
        }
    }
    return reqIds[0..-2]
}

